

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <rev/CANSensor.h>


#include <rev/CANSparkMax.h>









namespace rpygen {


using namespace rev;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_rev__CANSensor :

    CfgBase

{
    using Base = rev::CANSensor;

    
    
    using override_base_SetInverted_b = rev::CANSensor;
    
    using override_base_KGetInverted_v = rev::CANSensor;
    
    using override_base_KGetSparkMaxFeedbackDeviceID_v = rev::CANSensor;
    
};



template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_rev__CANSensor : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;











    
    
#ifndef RPYGEN_DISABLE_SetInverted_b
    REVLibError SetInverted(bool inverted) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANSensor, PYBIND11_TYPE(REVLibError), LookupBase,
            "setInverted", SetInverted, inverted);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANSensor, PYBIND11_TYPE(bool), LookupBase,
            "getInverted", GetInverted, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSparkMaxFeedbackDeviceID_v
    int GetSparkMaxFeedbackDeviceID() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANSensor, PYBIND11_TYPE(int), LookupBase,
            "_getSparkMaxFeedbackDeviceID", GetSparkMaxFeedbackDeviceID, );
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


