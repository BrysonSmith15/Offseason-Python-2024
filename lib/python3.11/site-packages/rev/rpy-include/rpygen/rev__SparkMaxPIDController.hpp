

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <rev/SparkMaxPIDController.h>


#include <rev/CANSparkMax.h>









namespace rpygen {


using namespace rev;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_rev__SparkMaxPIDController :

    CfgBase

{
    using Base = rev::SparkMaxPIDController;

    
    
    using override_base_SetP_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetI_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetD_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetDFilter_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetFF_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetIZone_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetOutputRange_d_d_i = rev::SparkMaxPIDController;
    
    using override_base_KGetP_i = rev::SparkMaxPIDController;
    
    using override_base_KGetI_i = rev::SparkMaxPIDController;
    
    using override_base_KGetD_i = rev::SparkMaxPIDController;
    
    using override_base_KGetDFilter_i = rev::SparkMaxPIDController;
    
    using override_base_KGetFF_i = rev::SparkMaxPIDController;
    
    using override_base_KGetIZone_i = rev::SparkMaxPIDController;
    
    using override_base_KGetOutputMin_i = rev::SparkMaxPIDController;
    
    using override_base_KGetOutputMax_i = rev::SparkMaxPIDController;
    
    using override_base_SetSmartMotionMaxVelocity_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetSmartMotionMaxAccel_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetSmartMotionMinOutputVelocity_d_i = rev::SparkMaxPIDController;
    
    using override_base_SetSmartMotionAllowedClosedLoopError_d_i = rev::SparkMaxPIDController;
    
    using override_base_KGetSmartMotionMaxVelocity_i = rev::SparkMaxPIDController;
    
    using override_base_KGetSmartMotionMaxAccel_i = rev::SparkMaxPIDController;
    
    using override_base_KGetSmartMotionMinOutputVelocity_i = rev::SparkMaxPIDController;
    
    using override_base_KGetSmartMotionAllowedClosedLoopError_i = rev::SparkMaxPIDController;
    
    using override_base_SetIMaxAccum_d_i = rev::SparkMaxPIDController;
    
    using override_base_KGetIMaxAccum_i = rev::SparkMaxPIDController;
    
    using override_base_SetIAccum_d = rev::SparkMaxPIDController;
    
    using override_base_KGetIAccum_v = rev::SparkMaxPIDController;
    
    using override_base_SetFeedbackDevice_KRTCANSensor = rev::SparkMaxPIDController;
    
    using override_base_KGetPositionPIDWrappingEnabled_v = rev::SparkMaxPIDController;
    
    using override_base_KGetPositionPIDWrappingMaxInput_v = rev::SparkMaxPIDController;
    
    using override_base_KGetPositionPIDWrappingMinInput_v = rev::SparkMaxPIDController;
    
};



template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_rev__SparkMaxPIDController : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;




  using AccelStrategy [[maybe_unused]] = typename rev::SparkMaxPIDController::AccelStrategy;

  using ArbFFUnits [[maybe_unused]] = typename rev::SparkMaxPIDController::ArbFFUnits;








    
    
#ifndef RPYGEN_DISABLE_SetP_d_i
    REVLibError SetP(double gain, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetP_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setP", gain, slotID);
        return CxxCallBase::SetP(std::move(gain), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetI_d_i
    REVLibError SetI(double gain, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetI_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setI", gain, slotID);
        return CxxCallBase::SetI(std::move(gain), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetD_d_i
    REVLibError SetD(double gain, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetD_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setD", gain, slotID);
        return CxxCallBase::SetD(std::move(gain), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetDFilter_d_i
    REVLibError SetDFilter(double gain, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetDFilter_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setDFilter", gain, slotID);
        return CxxCallBase::SetDFilter(std::move(gain), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetFF_d_i
    REVLibError SetFF(double gain, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetFF_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setFF", gain, slotID);
        return CxxCallBase::SetFF(std::move(gain), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetIZone_d_i
    REVLibError SetIZone(double IZone, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetIZone_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setIZone", IZone, slotID);
        return CxxCallBase::SetIZone(std::move(IZone), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetOutputRange_d_d_i
    REVLibError SetOutputRange(double min, double max, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetOutputRange_d_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setOutputRange", min, max, slotID);
        return CxxCallBase::SetOutputRange(std::move(min), std::move(max), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetP_i
    double GetP(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetP_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getP", slotID);
        return CxxCallBase::GetP(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetI_i
    double GetI(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetI_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getI", slotID);
        return CxxCallBase::GetI(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetD_i
    double GetD(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetD_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getD", slotID);
        return CxxCallBase::GetD(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetDFilter_i
    double GetDFilter(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetDFilter_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getDFilter", slotID);
        return CxxCallBase::GetDFilter(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetFF_i
    double GetFF(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetFF_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getFF", slotID);
        return CxxCallBase::GetFF(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetIZone_i
    double GetIZone(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetIZone_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getIZone", slotID);
        return CxxCallBase::GetIZone(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetOutputMin_i
    double GetOutputMin(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetOutputMin_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getOutputMin", slotID);
        return CxxCallBase::GetOutputMin(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetOutputMax_i
    double GetOutputMax(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetOutputMax_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getOutputMax", slotID);
        return CxxCallBase::GetOutputMax(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSmartMotionMaxVelocity_d_i
    REVLibError SetSmartMotionMaxVelocity(double maxVel, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetSmartMotionMaxVelocity_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setSmartMotionMaxVelocity", maxVel, slotID);
        return CxxCallBase::SetSmartMotionMaxVelocity(std::move(maxVel), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSmartMotionMaxAccel_d_i
    REVLibError SetSmartMotionMaxAccel(double maxAccel, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetSmartMotionMaxAccel_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setSmartMotionMaxAccel", maxAccel, slotID);
        return CxxCallBase::SetSmartMotionMaxAccel(std::move(maxAccel), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSmartMotionMinOutputVelocity_d_i
    REVLibError SetSmartMotionMinOutputVelocity(double minVel, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetSmartMotionMinOutputVelocity_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setSmartMotionMinOutputVelocity", minVel, slotID);
        return CxxCallBase::SetSmartMotionMinOutputVelocity(std::move(minVel), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetSmartMotionAllowedClosedLoopError_d_i
    REVLibError SetSmartMotionAllowedClosedLoopError(double allowedErr, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetSmartMotionAllowedClosedLoopError_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setSmartMotionAllowedClosedLoopError", allowedErr, slotID);
        return CxxCallBase::SetSmartMotionAllowedClosedLoopError(std::move(allowedErr), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSmartMotionMaxVelocity_i
    double GetSmartMotionMaxVelocity(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetSmartMotionMaxVelocity_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getSmartMotionMaxVelocity", slotID);
        return CxxCallBase::GetSmartMotionMaxVelocity(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSmartMotionMaxAccel_i
    double GetSmartMotionMaxAccel(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetSmartMotionMaxAccel_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getSmartMotionMaxAccel", slotID);
        return CxxCallBase::GetSmartMotionMaxAccel(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSmartMotionMinOutputVelocity_i
    double GetSmartMotionMinOutputVelocity(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetSmartMotionMinOutputVelocity_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getSmartMotionMinOutputVelocity", slotID);
        return CxxCallBase::GetSmartMotionMinOutputVelocity(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetSmartMotionAllowedClosedLoopError_i
    double GetSmartMotionAllowedClosedLoopError(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetSmartMotionAllowedClosedLoopError_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getSmartMotionAllowedClosedLoopError", slotID);
        return CxxCallBase::GetSmartMotionAllowedClosedLoopError(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetIMaxAccum_d_i
    REVLibError SetIMaxAccum(double iMaxAccum, int slotID) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetIMaxAccum_d_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setIMaxAccum", iMaxAccum, slotID);
        return CxxCallBase::SetIMaxAccum(std::move(iMaxAccum), std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetIMaxAccum_i
    double GetIMaxAccum(int slotID) const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetIMaxAccum_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getIMaxAccum", slotID);
        return CxxCallBase::GetIMaxAccum(std::move(slotID));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetIAccum_d
    REVLibError SetIAccum(double iAccum) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetIAccum_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setIAccum", iAccum);
        return CxxCallBase::SetIAccum(std::move(iAccum));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetIAccum_v
    double GetIAccum() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetIAccum_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getIAccum", );
        return CxxCallBase::GetIAccum();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetFeedbackDevice_KRTCANSensor
    REVLibError SetFeedbackDevice(const CANSensor& sensor) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetFeedbackDevice_KRTCANSensor;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setFeedbackDevice", sensor);
        return CxxCallBase::SetFeedbackDevice(std::forward<decltype(sensor)>(sensor));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPositionPIDWrappingEnabled_v
    bool GetPositionPIDWrappingEnabled() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPositionPIDWrappingEnabled_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "getPositionPIDWrappingEnabled", );
        return CxxCallBase::GetPositionPIDWrappingEnabled();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPositionPIDWrappingMaxInput_v
    double GetPositionPIDWrappingMaxInput() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPositionPIDWrappingMaxInput_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getPositionPIDWrappingMaxInput", );
        return CxxCallBase::GetPositionPIDWrappingMaxInput();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPositionPIDWrappingMinInput_v
    double GetPositionPIDWrappingMinInput() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPositionPIDWrappingMinInput_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getPositionPIDWrappingMinInput", );
        return CxxCallBase::GetPositionPIDWrappingMinInput();
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


