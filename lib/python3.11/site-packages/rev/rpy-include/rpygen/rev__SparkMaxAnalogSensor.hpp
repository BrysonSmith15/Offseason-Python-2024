

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <rev/SparkMaxAnalogSensor.h>






#define RPYGEN_DISABLE_KGetSparkMaxFeedbackDeviceID_v





#include <rpygen/rev__AnalogInput.hpp>

#include <rpygen/rev__CANAnalog.hpp>



namespace rpygen {


using namespace rev;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_rev__SparkMaxAnalogSensor :


    PyTrampolineCfg_rev__AnalogInput<

    PyTrampolineCfg_rev__CANAnalog<

CfgBase
>>

{
    using Base = rev::SparkMaxAnalogSensor;

    
    
    using override_base_KGetVoltage_v = rev::SparkMaxAnalogSensor;
    
    using override_base_KGetPosition_v = rev::SparkMaxAnalogSensor;
    
    using override_base_KGetVelocity_v = rev::SparkMaxAnalogSensor;
    
    using override_base_SetPositionConversionFactor_d = rev::SparkMaxAnalogSensor;
    
    using override_base_KGetPositionConversionFactor_v = rev::SparkMaxAnalogSensor;
    
    using override_base_SetVelocityConversionFactor_d = rev::SparkMaxAnalogSensor;
    
    using override_base_KGetVelocityConversionFactor_v = rev::SparkMaxAnalogSensor;
    
    using override_base_SetAverageDepth_j = rev::SparkMaxAnalogSensor;
    
    using override_base_SetMeasurementPeriod_j = rev::SparkMaxAnalogSensor;
    
    using override_base_KGetAverageDepth_v = rev::SparkMaxAnalogSensor;
    
    using override_base_KGetMeasurementPeriod_v = rev::SparkMaxAnalogSensor;
    
    using override_base_SetInverted_b = rev::SparkMaxAnalogSensor;
    
    using override_base_KGetInverted_v = rev::SparkMaxAnalogSensor;
    
};




template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_rev__SparkMaxAnalogSensor =

    PyTrampoline_rev__AnalogInput<

    PyTrampoline_rev__CANAnalog<

        PyTrampolineBase

        
        , PyTrampolineCfg
    >

        
        , PyTrampolineCfg
    >

;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_rev__SparkMaxAnalogSensor : PyTrampolineBase_rev__SparkMaxAnalogSensor<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_rev__SparkMaxAnalogSensor<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_rev__SparkMaxAnalogSensor;




  using Mode [[maybe_unused]] = typename rev::SparkMaxAnalogSensor::Mode;








    
    
#ifndef RPYGEN_DISABLE_KGetVoltage_v
    double GetVoltage() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetVoltage_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getVoltage", );
        return CxxCallBase::GetVoltage();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPosition_v
    double GetPosition() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPosition_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getPosition", );
        return CxxCallBase::GetPosition();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetVelocity_v
    double GetVelocity() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetVelocity_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getVelocity", );
        return CxxCallBase::GetVelocity();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetPositionConversionFactor_d
    REVLibError SetPositionConversionFactor(double factor) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetPositionConversionFactor_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setPositionConversionFactor", factor);
        return CxxCallBase::SetPositionConversionFactor(std::move(factor));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPositionConversionFactor_v
    double GetPositionConversionFactor() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPositionConversionFactor_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getPositionConversionFactor", );
        return CxxCallBase::GetPositionConversionFactor();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetVelocityConversionFactor_d
    REVLibError SetVelocityConversionFactor(double factor) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetVelocityConversionFactor_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setVelocityConversionFactor", factor);
        return CxxCallBase::SetVelocityConversionFactor(std::move(factor));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetVelocityConversionFactor_v
    double GetVelocityConversionFactor() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetVelocityConversionFactor_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getVelocityConversionFactor", );
        return CxxCallBase::GetVelocityConversionFactor();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetAverageDepth_j
    REVLibError SetAverageDepth(uint32_t depth) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetAverageDepth_j;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setAverageDepth", depth);
        return CxxCallBase::SetAverageDepth(std::move(depth));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetMeasurementPeriod_j
    REVLibError SetMeasurementPeriod(uint32_t period_ms) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetMeasurementPeriod_j;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setMeasurementPeriod", period_ms);
        return CxxCallBase::SetMeasurementPeriod(std::move(period_ms));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetAverageDepth_v
    uint32_t GetAverageDepth() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetAverageDepth_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(uint32_t), LookupBase,
            "getAverageDepth", );
        return CxxCallBase::GetAverageDepth();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetMeasurementPeriod_v
    uint32_t GetMeasurementPeriod() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetMeasurementPeriod_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(uint32_t), LookupBase,
            "getMeasurementPeriod", );
        return CxxCallBase::GetMeasurementPeriod();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetInverted_b
    REVLibError SetInverted(bool inverted) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetInverted_b;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(REVLibError), LookupBase,
            "setInverted", inverted);
        return CxxCallBase::SetInverted(std::move(inverted));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetInverted_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "getInverted", );
        return CxxCallBase::GetInverted();
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


