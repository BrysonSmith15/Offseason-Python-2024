

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <rev/MotorFeedbackSensor.h>






#define RPYGEN_DISABLE_KGetSparkMaxFeedbackDeviceID_v





#include <rpygen/rev__CANSensor.hpp>



namespace rpygen {


using namespace rev;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_rev__MotorFeedbackSensor :


    PyTrampolineCfg_rev__CANSensor<

CfgBase
>

{
    using Base = rev::MotorFeedbackSensor;

    
    
    using override_base_SetInverted_b = rev::MotorFeedbackSensor;
    
    using override_base_KGetInverted_v = rev::MotorFeedbackSensor;
    
};




template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_rev__MotorFeedbackSensor =

    PyTrampoline_rev__CANSensor<

        PyTrampolineBase

        
        , PyTrampolineCfg
    >

;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_rev__MotorFeedbackSensor : PyTrampolineBase_rev__MotorFeedbackSensor<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_rev__MotorFeedbackSensor<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_rev__MotorFeedbackSensor;











    
    
#ifndef RPYGEN_DISABLE_SetInverted_b
    REVLibError SetInverted(bool inverted) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(MotorFeedbackSensor, PYBIND11_TYPE(REVLibError), LookupBase,
            "setInverted", SetInverted, inverted);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(MotorFeedbackSensor, PYBIND11_TYPE(bool), LookupBase,
            "getInverted", GetInverted, );
    
    
    
    }
#endif

    

    
    

    

    
    int GetSparkMaxFeedbackDeviceID() const override {
  throw py::type_error("not implemented");
}
    
};

}; // namespace rpygen


