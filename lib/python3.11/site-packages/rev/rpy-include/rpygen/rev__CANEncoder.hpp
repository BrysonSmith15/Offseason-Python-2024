

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <rev/CANEncoder.h>










#include <rpygen/rev__MotorFeedbackSensor.hpp>



namespace rpygen {


using namespace rev;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_rev__CANEncoder :


    PyTrampolineCfg_rev__MotorFeedbackSensor<

CfgBase
>

{
    using Base = rev::CANEncoder;

    
    
    using override_base_KGetPosition_v = rev::CANEncoder;
    
    using override_base_KGetVelocity_v = rev::CANEncoder;
    
    using override_base_SetPosition_d = rev::CANEncoder;
    
    using override_base_SetPositionConversionFactor_d = rev::CANEncoder;
    
    using override_base_SetVelocityConversionFactor_d = rev::CANEncoder;
    
    using override_base_KGetPositionConversionFactor_v = rev::CANEncoder;
    
    using override_base_KGetVelocityConversionFactor_v = rev::CANEncoder;
    
    using override_base_SetAverageDepth_j = rev::CANEncoder;
    
    using override_base_SetMeasurementPeriod_j = rev::CANEncoder;
    
    using override_base_KGetAverageDepth_v = rev::CANEncoder;
    
    using override_base_KGetMeasurementPeriod_v = rev::CANEncoder;
    
    using override_base_KGetCountsPerRevolution_v = rev::CANEncoder;
    
    using override_base_SetInverted_b = rev::CANEncoder;
    
    using override_base_KGetInverted_v = rev::CANEncoder;
    
};




template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_rev__CANEncoder =

    PyTrampoline_rev__MotorFeedbackSensor<

        PyTrampolineBase

        
        , PyTrampolineCfg
    >

;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_rev__CANEncoder : PyTrampolineBase_rev__CANEncoder<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_rev__CANEncoder<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_rev__CANEncoder;




  using EncoderType [[maybe_unused]] = typename rev::CANEncoder::EncoderType;

  using AlternateEncoderType [[maybe_unused]] = typename rev::CANEncoder::AlternateEncoderType;








    
    
#ifndef RPYGEN_DISABLE_KGetPosition_v
    double GetPosition() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(double), LookupBase,
            "getPosition", GetPosition, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetVelocity_v
    double GetVelocity() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(double), LookupBase,
            "getVelocity", GetVelocity, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetPosition_d
    REVLibError SetPosition(double position) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(REVLibError), LookupBase,
            "setPosition", SetPosition, position);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetPositionConversionFactor_d
    REVLibError SetPositionConversionFactor(double factor) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(REVLibError), LookupBase,
            "setPositionConversionFactor", SetPositionConversionFactor, factor);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetVelocityConversionFactor_d
    REVLibError SetVelocityConversionFactor(double factor) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(REVLibError), LookupBase,
            "setVelocityConversionFactor", SetVelocityConversionFactor, factor);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetPositionConversionFactor_v
    double GetPositionConversionFactor() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(double), LookupBase,
            "getPositionConversionFactor", GetPositionConversionFactor, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetVelocityConversionFactor_v
    double GetVelocityConversionFactor() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(double), LookupBase,
            "getVelocityConversionFactor", GetVelocityConversionFactor, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetAverageDepth_j
    REVLibError SetAverageDepth(uint32_t depth) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(REVLibError), LookupBase,
            "setAverageDepth", SetAverageDepth, depth);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetMeasurementPeriod_j
    REVLibError SetMeasurementPeriod(uint32_t period_ms) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(REVLibError), LookupBase,
            "setMeasurementPeriod", SetMeasurementPeriod, period_ms);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetAverageDepth_v
    uint32_t GetAverageDepth() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(uint32_t), LookupBase,
            "getAverageDepth", GetAverageDepth, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetMeasurementPeriod_v
    uint32_t GetMeasurementPeriod() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(uint32_t), LookupBase,
            "getMeasurementPeriod", GetMeasurementPeriod, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetCountsPerRevolution_v
    uint32_t GetCountsPerRevolution() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(uint32_t), LookupBase,
            "getCountsPerRevolution", GetCountsPerRevolution, );
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetInverted_b
    REVLibError SetInverted(bool inverted) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(REVLibError), LookupBase,
            "setInverted", SetInverted, inverted);
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANEncoder, PYBIND11_TYPE(bool), LookupBase,
            "getInverted", GetInverted, );
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


