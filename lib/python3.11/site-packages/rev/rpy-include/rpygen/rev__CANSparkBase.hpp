

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>



#include <rev/CANSparkBase.h>










#include <rpygen/rev__CANSparkLowLevel.hpp>



namespace rpygen {


using namespace rev;





template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_rev__CANSparkBase :


    PyTrampolineCfg_rev__CANSparkLowLevel<

CfgBase
>

{
    using Base = rev::CANSparkBase;

    
    
    using override_base_Set_d = rev::CANSparkBase;
    
    using override_base_SetVoltage_Tvolt_t = rev::CANSparkBase;
    
    using override_base_KGet_v = rev::CANSparkBase;
    
    using override_base_SetInverted_b = rev::CANSparkBase;
    
    using override_base_KGetInverted_v = rev::CANSparkBase;
    
    using override_base_Disable_v = rev::CANSparkBase;
    
    using override_base_StopMotor_v = rev::CANSparkBase;
    
    using override_base_GetEncoder_v = rev::CANSparkBase;
    
};




template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_rev__CANSparkBase =

    PyTrampoline_rev__CANSparkLowLevel<

        PyTrampolineBase

        
        , PyTrampolineCfg
    >

;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_rev__CANSparkBase : PyTrampolineBase_rev__CANSparkBase<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_rev__CANSparkBase<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_rev__CANSparkBase;



  using ExternalFollower [[maybe_unused]] = typename rev::CANSparkBase::ExternalFollower;


  using IdleMode [[maybe_unused]] = typename rev::CANSparkBase::IdleMode;

  using SoftLimitDirection [[maybe_unused]] = typename rev::CANSparkBase::SoftLimitDirection;

  using FaultID [[maybe_unused]] = typename rev::CANSparkBase::FaultID;



    static constexpr auto kFollowerDisabled [[maybe_unused]] = rev::CANSparkBase::kFollowerDisabled;

    static constexpr auto kFollowerSparkMax [[maybe_unused]] = rev::CANSparkBase::kFollowerSparkMax;

    static constexpr auto kFollowerSpark [[maybe_unused]] = rev::CANSparkBase::kFollowerSpark;

    static constexpr auto kFollowerPhoenix [[maybe_unused]] = rev::CANSparkBase::kFollowerPhoenix;






    
    
#ifndef RPYGEN_DISABLE_Set_d
    void Set(double speed) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_Set_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "set", speed);
        return CxxCallBase::Set(std::move(speed));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetVoltage_Tvolt_t
    void SetVoltage(units::volt_t output) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetVoltage_Tvolt_t;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setVoltage", output);
        return CxxCallBase::SetVoltage(std::move(output));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGet_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "get", );
        return CxxCallBase::Get();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetInverted_b;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setInverted", isInverted);
        return CxxCallBase::SetInverted(std::move(isInverted));
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetInverted_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "getInverted", );
        return CxxCallBase::GetInverted();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_Disable_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "disable", );
        return CxxCallBase::Disable();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        using CxxCallBase = typename PyTrampolineCfg::override_base_StopMotor_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "stopMotor", );
        return CxxCallBase::StopMotor();
    
    
    
    }
#endif

    
#ifndef RPYGEN_DISABLE_GetEncoder_v
    SparkRelativeEncoder GetEncoder() override {
    
    
    
    
        using LookupBase = typename PyTrampolineCfg::Base;
    
    
        RPYBUILD_OVERRIDE_PURE_NAME(CANSparkBase, PYBIND11_TYPE(SparkRelativeEncoder), LookupBase,
            "getEncoder", GetEncoder, );
    
    
    
    }
#endif

    

    
    

    

    
};

}; // namespace rpygen


